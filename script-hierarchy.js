var family = {
    name: "root",
    children: [
        { name: "child #1" },
        {
            name: "child #2",
            children: [
                { name: "grandchild #1" },
                { name: "grandchild #2" },
                { name: "grandchild #3" },
            ],
        },
    ],
};

// TODO: Call the function d3.hierarchy on the family hierarchy.
var root = d3.hierarchy(family);

// TODO: Prepare your tree layout with the function d3.tree().
let layout = d3.tree().size([width, height]);

var width = 500;
var height = 500;

var svg = d3.select("#hierarchy")
    .style("width", width + "px")
    .style("height", height + "px");

let bound = svg.append("g")
    .attr("transform", `translate(10,0)`);

// TODO: Pass the links generated by your hierarchy.
let link = bound.insert("g")
    .attr("fill", "none")
    .attr("stroke", "#555")
    .attr("stroke-opacity", 0.4)
    .attr("stroke-width", 2)
    .selectAll("path")
    .data(layout(root).links()) // Use layout(root).links() to get the links.
    .enter()
    .append("path")
    .attr("d", d3.linkHorizontal()
        .x(d => d.y)
        .y(d => d.x));

// TODO: Pass the descendants of your root.
const node = bound.append("g")
    .selectAll("circle")
    .data(root.descendants()) // Use root.descendants() to get the descendants.
    .enter()
    .append("circle")
    .attr("transform", d => `translate(${d.y},${d.x}`)
    .attr("fill", d => d.children ? "#555" : "#999")
    .attr("r", 4);